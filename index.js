class Product {
    constructor({ id, title, description, price, thumbnail, code, stock, ...props }) {
        this.id = id
        this.title = title
        this.description = description
        this.price = price
        this.thumbnail = thumbnail
        this.code = code
        this.stock = stock
    }

    getData = () => {
        return ({
            id: this.id,
            title: this.title,
            description: this.description,
            price: this.price,
            thumbnail: this.thumbnail,
            code: this.code,
            stock: this.stock,
        })
    }
}

class ProductManager {
    constructor() {
        this.products = []
        this.id = 0
    }

    addProduct = ({ title, description, price, thumbnail, code, stock, ...props }) => {

        //Verify if code is duplicated and all fields exists
        if (this.products.some((x) => x.code === code) || !title || !description || !price || !thumbnail || !code || !stock) {

            //Duplicated code field
            !this.products.some((x) => x.code === code) || console.log(`Duplicated key ERROR: code ${code} is duplicated`)

            //Required fields
            title || console.log(`Validation ERROR: title is required`)
            description || console.log(`Validation ERROR: description is required`)
            price || console.log(`Validation ERROR: price is required`)
            thumbnail || console.log(`Validation ERROR: thumbnail is required`)
            code || console.log(`Validation ERROR: code is required`)
            stock || console.log(`Validation ERROR: stock is required`)

        } else {
            //New product instance
            const product = new Product({
                id: this.id, //use the autogenerated id 
                title: title,
                description: description,
                price: price,
                thumbnail: thumbnail,
                code: code,
                stock: stock
            })
            this.products.push(product.getData())

            //Add 1 to the id
            ++this.id
        }
    }

    getProducts = () => {
        //Return all products
        return (this.products)
    }

    getProductoById = (id) => {
        const product = this.products.filter((product) => product.id === id)
        //If the product exists return the product
        return (product.toString() === "" ? "Not found" : product)
    }
}

//Testing

let products = new ProductManager()

console.log(products.getProducts())

products.addProduct({
    title: 'producto prueba',
    description: 'Este es un producto prueba',
    price: 200,
    thumbnail: 'Sin imagen',
    code: 'abc123',
    stock: 25
})

console.log(products.getProducts())

products.addProduct({
    title: 'producto prueba',
    description: 'Este es un producto prueba',
    price: 200,
    thumbnail: 'Sin imagen',
    code: 'abc123',
    stock: 25
})

console.log(products.getProducts())

products.addProduct({
    title: 'producto prueba1',
    description: 'Este es un producto prueba',
    price: 200,
    thumbnail: 'Sin imagen',
    code: 'abc124',
    stock: 25
})

console.log(products.getProducts())

console.log(products.getProductoById('123'))
console.log(products.getProductoById(1))